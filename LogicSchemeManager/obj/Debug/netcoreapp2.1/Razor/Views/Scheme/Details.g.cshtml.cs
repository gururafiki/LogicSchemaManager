#pragma checksum "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9a48bf201f73a3622fb456cfd69a12a4e856b576"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Scheme_Details), @"mvc.1.0.view", @"/Views/Scheme/Details.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Scheme/Details.cshtml", typeof(AspNetCore.Views_Scheme_Details))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\_ViewImports.cshtml"
using LogicSchemeManager;

#line default
#line hidden
#line 2 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\_ViewImports.cshtml"
using LogicSchemeManager.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9a48bf201f73a3622fb456cfd69a12a4e856b576", @"/Views/Scheme/Details.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c8e9609d224ba70a39ef92661d08c6ea597955aa", @"/Views/_ViewImports.cshtml")]
    public class Views_Scheme_Details : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<LogicSchemeManager.Models.Schema>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Edit", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("error-element-port"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(41, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
  
    ViewData["Title"] = "Details";

#line default
#line hidden
            BeginContext(86, 120, true);
            WriteLiteral("\r\n<h2>Details</h2>\r\n\r\n<div>\r\n    <h4>Schema</h4>\r\n    <hr />\r\n    <dl class=\"dl-horizontal\">\r\n        <dt>\r\n            ");
            EndContext();
            BeginContext(207, 40, false);
#line 14 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
       Write(Html.DisplayNameFor(model => model.Name));

#line default
#line hidden
            EndContext();
            BeginContext(247, 43, true);
            WriteLiteral("\r\n        </dt>\r\n        <dd>\r\n            ");
            EndContext();
            BeginContext(291, 36, false);
#line 17 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
       Write(Html.DisplayFor(model => model.Name));

#line default
#line hidden
            EndContext();
            BeginContext(327, 133, true);
            WriteLiteral("\r\n        </dd>\r\n    </dl>\r\n</div>\r\n\r\n<div id=\"network\" style=\"height: 500px;\">\r\n\r\n</div>\r\n<div id=\"myQmcDisplay\"></div>\r\n<div>\r\n    ");
            EndContext();
            BeginContext(460, 60, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e387a646ffc5489893b9638b2fa912d2", async() => {
                BeginContext(512, 4, true);
                WriteLiteral("Edit");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            if (__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues == null)
            {
                throw new InvalidOperationException(InvalidTagHelperIndexerAssignment("asp-route-id", "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper", "RouteValues"));
            }
            BeginWriteTagHelperAttribute();
#line 27 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
                           WriteLiteral(Model.SchemaId);

#line default
#line hidden
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"] = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-route-id", __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"], global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(520, 8, true);
            WriteLiteral(" |\r\n    ");
            EndContext();
            BeginContext(528, 38, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "77881f751d6d4158896391879603b6eb", async() => {
                BeginContext(550, 12, true);
                WriteLiteral("Back to List");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(566, 682, true);
            WriteLiteral(@"
    <button class=""truth-table-btn btn btn-info"" onclick=""getTruthTable(true);"">Get truth table</button>
    <button class=""truth-table-btn btn btn-info"" onclick=""getTruthTable(false);"">Get extended truth table</button>
    <button class=""btn btn-default minimize-btn disabled"" style=""display:none"" onclick=""runMinimization();"">Minimize</button>
    <button class=""btn btn-success"" onclick=""savePosition();"">Save coordinates</button>
</div>

<div id=""error-check"" class=""container-fluid"" style=""margin: 20px auto;display: none;"">
    <div class=""row"">
        <div class=""form-group col-xs-12 col-md-4"">
            <label class=""control-label"">Port</label>
            ");
            EndContext();
            BeginContext(1248, 100, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cb2569f64f5b474daa7d8d1ab1a9f71e", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
#line 39 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = ViewBag.OutptElementPorts;

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1348, 3460, true);
            WriteLiteral(@"
        </div>
        <div class=""col-xs-12 col-md-4"" style=""padding-top: 30px;"">
            <label for=""error-value""><input id=""error-value"" type=""checkbox"" />Error value</label>
        </div>
        <div class=""col-xs-12 col-md-4"" style=""padding-top: 30px;"">
            <button class=""truth-table-error-btn btn btn-primary col-xs-12 col-md-4"" onclick=""getErrorTruthTable();"">Get vetctors</button>
        </div>
    </div>
</div>
<div class=""container-fluid"">
    <div class=""row"">
        <div class=""col-md-6"">
            <div class=""table truth-table"">
                <table class=""table-bordered table-condensed table-hover table-responsive table-striped"">
                    <thead>

                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        <div class=""col-md-6"">
            <div class=""table error-table"">
                <table class=""table-bordered table-condensed table-hover table-responsive table-strip");
            WriteLiteral(@"ed"">
                    <thead>

                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<script>
    var data = {};
    var container = document.getElementById('network');
    var truthTableOutputs = [];
    var truthTableInputNames = [];
    var countInputs = 0;
    var options = {
        ""nodes"": {
            ""color"": {
                ""border"": ""rgba(0,0,0,1)"",
                ""background"": ""rgba(255,246,251,1)"",
                ""highlight"": {},
                ""hover"": {}
            },
            ""font"": {
                ""size"": 20,
                ""strokeWidth"": 3
            },
            ""shape"": ""box"",
            ""shapeProperties"": {
                ""borderRadius"": 0
            },
            ""size"": 50
        },
        ""edges"": {
            ""arrows"": {
                ""to"": {
                    ""enabled"": true
                }
            },
            ""font"": ");
            WriteLiteral(@"{
                ""size"": 15,
                ""strokeWidth"": 3,
                ""align"": ""middle""
            },
            ""scaling"": {
                ""max"": 53
            },
            ""selfReferenceSize"": 200,
            ""smooth"": false,
            ""width"": 2
        },
        interaction: { dragNodes: true },
        physics: {
            enabled: false
        }
    };
    var network = {};
</script>
<script>
    window.onload = function () {
        drawVisSchema();
    };
    function getItemData(nodeID) {
        for (var index in data.nodes) {
            if (data.nodes[index].id == nodeID) {
                return data.nodes[index].hasOwnProperty('elementPortId') ?
                    { itemId: data.nodes[index].elementPortId, isPort: true } :
                    { itemId: data.nodes[index].id, isPort: false };
            }
        }
    }
    function savePosition() {
        var objectCoords = network.getPositions();
        var requestData = [];
       ");
            WriteLiteral(@" for (var nodeID in objectCoords) {
            if (objectCoords.hasOwnProperty(nodeID)) {
                var item = getItemData(nodeID);
                item.x = objectCoords[nodeID].x;
                item.y = objectCoords[nodeID].y;
                requestData.push(item);
            }
        }

        $.ajax({
            method: 'PUT',
            url: ""/api/vis/"" + ");
            EndContext();
            BeginContext(4809, 14, false);
#line 149 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
                          Write(Model.SchemaId);

#line default
#line hidden
            EndContext();
            BeginContext(4823, 337, true);
            WriteLiteral(@",
            contentType: ""application/json; charset=utf-8"",
            dataType: ""json"",
            data: JSON.stringify(requestData),
            success: function (result) {
                drawVisSchema();
            }
        });

    }
    function drawVisSchema() {
        $.ajax({
            url: '/api/vis/' + ");
            EndContext();
            BeginContext(5161, 14, false);
#line 161 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
                          Write(Model.SchemaId);

#line default
#line hidden
            EndContext();
            BeginContext(5175, 399, true);
            WriteLiteral(@",
            type: 'GET',
            contentType: ""application/json"",
            success: function (visdata) {
                data = visdata;
                network = new vis.Network(container, data, options);
            }
        });
    }
    function getTruthTable(mode) {
        $('.truth-table-btn').addClass('disabled');
        $.ajax({
            url: '/api/function/' + ");
            EndContext();
            BeginContext(5575, 14, false);
#line 173 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
                               Write(Model.SchemaId);

#line default
#line hidden
            EndContext();
            BeginContext(5589, 1366, true);
            WriteLiteral(@" + '/' + mode,
            type: 'GET',
            contentType: ""application/json"",
            success: function (truthTableRows) {
                $("".truth-table>table tbody"").html('');
                var rows = """";
                $.each(truthTableRows.rows, function (index, truthTableRow) {
                    if (index == 0) {
                        $("".truth-table>table thead"").html(header(truthTableRow, mode, false));
                    }
                    // добавляем полученные элементы в таблицу
                    rows += row(truthTableRow, mode, false, index);
                });
                $("".truth-table>table tbody"").append(rows);
                $('.truth-table-btn').removeClass('disabled');
                if (mode == true) {
                    $(""#error-check"").show();
                    $('.minimize-btn').removeClass('disabled');
                    $('.minimize-btn').show();
                }
                else {
                    $('.minimize-btn').h");
            WriteLiteral(@"ide();
                }
            }
        });
    }

    function getErrorTruthTable() {
        $('.truth-table-error-btn').addClass('disabled');
        var elementPortId = $(""#error-element-port"").val();
        var elementPortValue = $(""#error-value"").prop('checked');
        $.ajax({
            url: '/api/function/' + ");
            EndContext();
            BeginContext(6956, 14, false);
#line 205 "D:\CsharpProjects\LogicSchemeManager\LogicSchemeManager\Views\Scheme\Details.cshtml"
                               Write(Model.SchemaId);

#line default
#line hidden
            EndContext();
            BeginContext(6970, 3063, true);
            WriteLiteral(@" + '/' + elementPortId + '/' + elementPortValue,
            type: 'POST',
            contentType: ""application/json"",
            success: function (truthTableRows) {
                $("".error-table>table tbody"").html('');
                var rows = """";
                $.each(truthTableRows.rows, function (index, truthTableRow) {
                    if (index == 0) {
                        $("".error-table>table thead"").html(header(truthTableRow));
                    }
                    // добавляем полученные элементы в таблицу
                    rows += row(truthTableRow, false, true, index);
                });
                $("".error-table>table tbody"").append(rows);
                $("".truth-table"").addClass(""col-md-6"");
                $("".error-table"").addClass(""col-md-6"");
                $('.truth-table-error-btn').removeClass('disabled');
            }
        });
    }

    function header(truthTableRow, isTrueTruthTable, isErrorTable) {
        var result = ""<tr>"";
 ");
            WriteLiteral(@"       countInputs = 0;
        for (var index in truthTableRow.inputs) {
            if (truthTableRow.inputs.hasOwnProperty(index)) {
                countInputs++;
                if (isTrueTruthTable)
                    truthTableInputNames.push(index);
                result += ""<th>"" + index + ""</th>"";
            }
        }
        result += ""<th></th>"";
        for (var index in truthTableRow.outputs) {
            if (truthTableRow.outputs.hasOwnProperty(index)) {
                result += ""<th>"" + index + ""</th>"";
            }
        }
        result += ""</tr>"";
        return result;
    }
    function row(truthTableRow, isTrueTruthTable, isErrorTable, i) {
        var result = ""<tr>"";
        for (var index in truthTableRow.inputs) {
            if (truthTableRow.inputs.hasOwnProperty(index)) {
                result += ""<td>"" + truthTableRow.inputs[index] + ""</td>"";
            }
        }
        result += ""<td></td>"";

        //ToDO: check for many output element");
            WriteLiteral(@"s
        for (var index in truthTableRow.outputs) {
            if (truthTableRow.outputs.hasOwnProperty(index)) {
                if (isTrueTruthTable)
                    truthTableOutputs.push(truthTableRow.outputs[index]);

                if (isErrorTable && truthTableOutputs[i] == truthTableRow.outputs[index])
                    return '';

                result += ""<td>"" + truthTableRow.outputs[index] + ""</td>"";
            }
        }
        result += ""</tr>"";
        return result;
    }
</script>
<script language=""JavaScript"" type=""text/javascript"">
    var qmc = -1;
    function runMinimization() {
        $("".minimize-btn"").addClass('disabled');
        //qmc = new QuineMcCluskey(""fakeDivId"", columns, 0, 0);
        qmc = new QuineMcCluskey(""myQmcDisplay"", countInputs, 0);
        qmc.init();
        //ToDO: apply for many output elements
        qmc.data.applyData(truthTableOutputs, truthTableInputNames, true, false);
        qmc.update();
    }
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<LogicSchemeManager.Models.Schema> Html { get; private set; }
    }
}
#pragma warning restore 1591
